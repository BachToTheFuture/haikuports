From 234c330c16c7df5367989694857eb3300f858b8b Mon Sep 17 00:00:00 2001
From: Bach Nguyen <bach5000@gmail.com>
Date: Fri, 30 Nov 2018 21:34:40 +0000
Subject: [PATCH] Fix build


diff --git a/Makefile b/Makefile
index 18ff675..b5cc35e 100644
--- a/Makefile
+++ b/Makefile
@@ -20,14 +20,14 @@ jigdump: jigdump.o md5.o
 	$(CC) $(LDFLAGS) -o $@ $+
 
 lib: libjte/Makefile
-	make -C libjte
-
+	make -C libjte 
+	
 libjte/Makefile:
-	cd libjte && ./configure
-
+	cd libjte 
+	
 clean:
 	rm -f *.o $(BINS) *~ build-stamp
 	-make -C libjte clean
 
 distclean: clean
-	-make -C libjte distclean
\ No newline at end of file
+	-make -C libjte distclean
diff --git a/libjte/Makefile b/libjte/Makefile
new file mode 100644
index 0000000..81e25c5
--- /dev/null
+++ b/libjte/Makefile
@@ -0,0 +1,137 @@
+## Haiku Generic Makefile ##
+
+## Fill in this file to specify the project being created, and the referenced
+## Makefile-Engine will do all of the hard work for you. This handles any
+## architecture of Haiku.
+
+# The name of the binary.
+NAME = libjte.so
+
+# The type of binary, must be one of:
+#	APP:	Application
+#	SHARED:	Shared library or add-on
+#	STATIC:	Static library archive
+#	DRIVER: Kernel driver
+TYPE = SHARED
+
+# 	If you plan to use localization, specify the application's MIME signature.
+APP_MIME_SIG = application/x-gjvr-bong
+
+#	The following lines tell Pe and Eddie where the SRCS, RDEFS, and RSRCS are
+#	so that Pe and Eddie can fill them in for you.
+#%{
+# @src->@ 
+
+#	Specify the source files to use. Full paths or paths relative to the 
+#	Makefile can be included. All files, regardless of directory, will have
+#	their object files created in the common object directory. Note that this
+#	means this Makefile will not work correctly if two source files with the
+#	same name (source.c or source.cpp) are included from different directories.
+#	Also note that spaces in folder names do not work well with this Makefile.
+SRCS = \
+	checksum.c  \
+	 endian.c  \
+	 jte.c  \
+	 libjte.c  \
+	 md5.c  \
+	 rsync.c  \
+	 sha1.c  \
+	 sha256.c  \
+	 sha512.c  \
+
+
+#	Specify the resource definition files to use. Full or relative paths can be
+#	used.
+RDEFS = \
+
+
+#	Specify the resource files to use. Full or relative paths can be used.
+#	Both RDEFS and RSRCS can be utilized in the same Makefile.
+RSRCS = \
+	 
+
+# End Pe/Eddie support.
+# @<-src@ 
+#%}
+
+#%}
+
+#	Specify libraries to link against.
+#	There are two acceptable forms of library specifications:
+#	-	if your library follows the naming pattern of libXXX.so or libXXX.a,
+#		you can simply specify XXX for the library. (e.g. the entry for
+#		"libtracker.so" would be "tracker")
+#
+#	-	for GCC-independent linking of standard C++ libraries, you can use
+#		$(STDCPPLIBS) instead of the raw "stdc++[.r4] [supc++]" library names.
+#
+#	- 	if your library does not follow the standard library naming scheme,
+#		you need to specify the path to the library and it's name.
+#		(e.g. for mylib.a, specify "mylib.a" or "path/mylib.a")
+LIBS = $(STDCPPLIBS) be game tracker media device
+
+#	Specify additional paths to directories following the standard libXXX.so
+#	or libXXX.a naming scheme. You can specify full paths or paths relative
+#	to the Makefile. The paths included are not parsed recursively, so
+#	include all of the paths where libraries must be found. Directories where
+#	source files were specified are	automatically included.
+LIBPATHS = 
+
+#	Additional paths to look for system headers. These use the form
+#	"#include <header>". Directories that contain the files in SRCS are
+#	NOT auto-included here.
+SYSTEM_INCLUDE_PATHS = 
+
+#	Additional paths paths to look for local headers. These use the form
+#	#include "header". Directories that contain the files in SRCS are
+#	automatically included.
+LOCAL_INCLUDE_PATHS =
+
+#	Specify the level of optimization that you want. Specify either NONE (O0),
+#	SOME (O1), FULL (O2), or leave blank (for the default optimization level).
+OPTIMIZE :=
+
+# 	Specify the codes for languages you are going to support in this
+# 	application. The default "en" one must be provided too. "make catkeys"
+# 	will recreate only the "locales/en.catkeys" file. Use it as a template
+# 	for creating catkeys for other languages. All localization files must be
+# 	placed in the "locales" subdirectory.
+LOCALES = 
+
+#	Specify all the preprocessor symbols to be defined. The symbols will not
+#	have their values set automatically; you must supply the value (if any) to
+#	use. For example, setting DEFINES to "DEBUG=1" will cause the compiler
+#	option "-DDEBUG=1" to be used. Setting DEFINES to "DEBUG" would pass
+#	"-DDEBUG" on the compiler's command line.
+DEFINES = 
+
+#	Specify the warning level. Either NONE (suppress all warnings),
+#	ALL (enable all warnings), or leave blank (enable default warnings).
+WARNINGS = 
+
+#	With image symbols, stack crawls in the debugger are meaningful.
+#	If set to "TRUE", symbols will be created.
+SYMBOLS := 
+
+#	Includes debug information, which allows the binary to be debugged easily.
+#	If set to "TRUE", debug info will be created.
+DEBUGGER := 
+
+#	Specify any additional compiler flags to be used.
+COMPILER_FLAGS = 
+
+#	Specify any additional linker flags to be used.
+LINKER_FLAGS = 
+
+#	(Only used when "TYPE" is "DRIVER"). Specify the desired driver install
+#	location in the /dev hierarchy. Example:
+#		DRIVER_PATH = video/usb
+#	will instruct the "driverinstall" rule to place a symlink to your driver's
+#	binary in ~/add-ons/kernel/drivers/dev/video/usb, so that your driver will
+#	appear at /dev/video/usb when loaded. The default is "misc".
+DRIVER_PATH = 
+
+## Include the Makefile-Engine
+DEVEL_DIRECTORY := \
+	$(shell findpaths -r "makefile_engine" B_FIND_PATH_DEVELOP_DIRECTORY)
+include $(DEVEL_DIRECTORY)/etc/makefile-engine
diff --git a/libjte/endianconv.h b/libjte/endianconv.h
index b0fb0ad..5817a57 100644
--- a/libjte/endianconv.h
+++ b/libjte/endianconv.h
@@ -10,7 +10,7 @@
 
 #ifndef _JTE_ENDIANCONV_H_
 #define _JTE_ENDIANCONV_H_
-
+#include <stdint.h>
 void                  write_be64(uint64_t in, unsigned char *out);
 uint64_t              read_be64(unsigned char *in);
 void                  write_le64(uint64_t in, unsigned char *out);
diff --git a/libjte/md5.h b/libjte/md5.h
index 1f7e539..cd3ec26 100644
--- a/libjte/md5.h
+++ b/libjte/md5.h
@@ -14,7 +14,7 @@
 
 #ifndef MD5_H
 #define MD5_H
-
+#include <stdint.h>
 /* Unlike previous versions of this code, uint32 need not be exactly
    32 bits, merely 32 bits or more.  Choosing a data type which is 32
    bits instead of 64 is not important; speed is considerably more
diff --git a/libjte/rsync.h b/libjte/rsync.h
index 19e9093..a8c23e5 100644
--- a/libjte/rsync.h
+++ b/libjte/rsync.h
@@ -1,6 +1,6 @@
 #ifndef _JTE_RSYNC_H_
 #define _JTE_RSYNC_H_
-
+#include <stdint.h>
 uint64_t rsync64(unsigned char *mem, size_t size);
 
 #endif
diff --git a/libjte/sha1.h b/libjte/sha1.h
index 41cef73..fa98cb3 100644
--- a/libjte/sha1.h
+++ b/libjte/sha1.h
@@ -21,6 +21,7 @@
  * <steve@einval.com> October 2010 */
 
 /* Structure to save state of computation between the single steps.  */
+#include <stdint.h>
 typedef struct 
 {
   uint32_t           h0,h1,h2,h3,h4;
diff --git a/libjte/sha256.h b/libjte/sha256.h
index ecd640e..59e8b3d 100644
--- a/libjte/sha256.h
+++ b/libjte/sha256.h
@@ -26,7 +26,7 @@
 #define _SHA256_H 1
 
 #include <limits.h>
-
+#include <stdint.h>
 #ifdef HAVE_STDINT_H
 #include <stdint.h>
 #else
diff --git a/libjte/sha512.h b/libjte/sha512.h
index a7c0105..29719e2 100644
--- a/libjte/sha512.h
+++ b/libjte/sha512.h
@@ -26,7 +26,7 @@
 #define _SHA512_H 1
 
 #include <limits.h>
-
+#include <stdint.h>
 #ifdef HAVE_STDINT_H
 #include <stdint.h>
 #else
-- 
2.19.0

