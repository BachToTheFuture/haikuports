From f1b8bddf3595fe3a45735365fe041f3a0995400c Mon Sep 17 00:00:00 2001
From: Bach Nguyen <bach5000@gmail.com>
Date: Mon, 19 Nov 2018 21:30:03 +0000
Subject: Fix build


diff --git a/src/app/About/AboutGitInfo.h b/src/app/About/AboutGitInfo.h
new file mode 100644
index 0000000..ecdc597
--- /dev/null
+++ b/src/app/About/AboutGitInfo.h
@@ -0,0 +1,8 @@
+
+#ifndef GIT_INFO_H
+#define GIT_INFO_H
+
+//do not edit this
+#define GIT_REV_STR "1"
+
+#endif
diff --git a/src/app/Document/PDocLoader.cpp b/src/app/Document/PDocLoader.cpp
index 572d76d..d3f5089 100644
--- a/src/app/Document/PDocLoader.cpp
+++ b/src/app/Document/PDocLoader.cpp
@@ -96,7 +96,7 @@ BList* PDocLoader::ReIndexSelected(BMessage *selectionMessage)
 
 	while (selectionMessage->FindPointer("node",i,&selectPointer) == B_OK)
 	{
-		newSelection->AddItem(indexer->PointerForIndex((int32)selectPointer));
+		newSelection->AddItem(indexer->PointerForIndex(static_cast<int32>(reinterpret_cast<intptr_t>(selectPointer))));
 		i++;
 	}
 	return newSelection;
diff --git a/src/app/Document/PEditorManager.cpp b/src/app/Document/PEditorManager.cpp
index 525f378..5bc25d9 100644
--- a/src/app/Document/PEditorManager.cpp
+++ b/src/app/Document/PEditorManager.cpp
@@ -148,7 +148,7 @@ status_t PEditorManager::RegisterPEditor(PEditor *editor)
 PEditor* PEditorManager::GetActivPEditor(void)
 {
 	TRACE();
-	return (PEditor *)editors->ItemAt((int32)activeEditor->LastItem());
+	return (PEditor *)editors->ItemAt(static_cast<int32>(reinterpret_cast<intptr_t>(activeEditor->LastItem())));
 }
 void PEditorManager::SetActivePEditor(int32 index)
 {
diff --git a/src/app/Tools/Indexer.cpp b/src/app/Tools/Indexer.cpp
index a868143..dd8c0e4 100644
--- a/src/app/Tools/Indexer.cpp
+++ b/src/app/Tools/Indexer.cpp
@@ -187,7 +187,7 @@ BMessage* Indexer::RegisterDeIndexNode(BMessage *node)
 	void		*tmpPointer			= NULL;
 	node->FindPointer("this",(void **)&tmpPointer);
 	node->RemoveName("this");
-	sorter[(int32)tmpPointer] = node;
+	sorter[static_cast<int32>(reinterpret_cast<intptr_t>(tmpPointer))] = node;
 	return node;
 }
 
@@ -204,7 +204,7 @@ BMessage* Indexer::DeIndexNode(BMessage *node)
 			node->RemoveName(P_C_NODE_ALLNODES);
 	
 	while (node->FindPointer("allNodesList",i,&subContainerEntry) == B_OK) {
-		nodeIndex = sorter.find((int32)subContainerEntry);
+		nodeIndex = sorter.find(static_cast<int32>(reinterpret_cast<intptr_t>(subContainerEntry)));
 		if (nodeIndex != sorter.end()){
 			allNodesList->AddItem(nodeIndex->second);
 			//delete just this entry from the Message
@@ -215,7 +215,7 @@ BMessage* Indexer::DeIndexNode(BMessage *node)
 			node->AddPointer(P_C_NODE_ALLNODES,allNodesList);
 	}
 	if (node->FindPointer(P_C_NODE_PARENT,(void **)&tmpPointer) == B_OK) {
-		nodeIndex = sorter.find((int32)tmpPointer);
+		nodeIndex = sorter.find(static_cast<int32>(reinterpret_cast<intptr_t>(tmpPointer)));
 		if (nodeIndex != sorter.end()) {
 			node->RemoveName(P_C_NODE_PARENT);
 			node->AddPointer(P_C_NODE_PARENT,nodeIndex->second);
@@ -277,14 +277,14 @@ BMessage* Indexer::DeIndexConnection(BMessage *connection)
 
 //		if we cant find the right Pointer then add the old one
 		map<int32,BMessage*>::iterator indexFrom;
-		indexFrom=sorter.find((int32)fromPointer);
+		indexFrom=sorter.find(static_cast<int32>(reinterpret_cast<intptr_t>(fromPointer)));
 		if (indexFrom != sorter.end())
 			connection->AddPointer(P_C_NODE_CONNECTION_FROM,indexFrom->second);
 		else
 			connection->AddPointer(P_C_NODE_CONNECTION_FROM,fromPointer);
 //		if we cant find the right Pointer then add the old one
 		map<int32,BMessage*>::iterator indexTo;
-		indexTo=sorter.find((int32)toPointer);
+		indexTo=sorter.find(static_cast<int32>(reinterpret_cast<intptr_t>(toPointer)));
 		if (indexTo != sorter.end())
 			connection->AddPointer(P_C_NODE_CONNECTION_TO,indexTo->second);
 		else
@@ -292,7 +292,7 @@ BMessage* Indexer::DeIndexConnection(BMessage *connection)
 	}
 	connection->FindPointer("this",(void **)&tmpPointer);
 	connection->RemoveName("this");
-	sorter[(int32)tmpPointer]=connection;
+	sorter[static_cast<int32>(reinterpret_cast<intptr_t>(tmpPointer))]=connection;
 	return connection;
 }
 
@@ -336,7 +336,7 @@ BMessage* Indexer::DeIndexCommand(BMessage *command)
 	//replace the old Pointer with the new ones
 	while (command->FindPointer("node",i,(void **)&node) == B_OK)
 	{
-		command->ReplacePointer("node",i,sorter[(int32)node]);
+		command->ReplacePointer("node",i,sorter[static_cast<int32>(reinterpret_cast<intptr_t>(node))]);
 		i++;
 	}
 	return command;
diff --git a/src/app/Tools/MessageXmlWriter.cpp b/src/app/Tools/MessageXmlWriter.cpp
index 7e3709a..f15cff8 100644
--- a/src/app/Tools/MessageXmlWriter.cpp
+++ b/src/app/Tools/MessageXmlWriter.cpp
@@ -260,7 +260,7 @@ TiXmlElement  MessageXmlWriter::ProcessMessage(const char* bName, BMessage *msg)
 		        	xmlSubNode.SetAttribute("name",name);
 					if (msg->FindPointer(name, q, &tmpPointer) == B_OK){
 						xmlSubNode.SetAttribute("type","B_POINTER_TYPE");
-						xmlSubNode.SetAttribute("value",(int32)tmpPointer);
+						xmlSubNode.SetAttribute("value",static_cast<int32>(reinterpret_cast<intptr_t>(tmpPointer)));
 					}
 					xmlNode.InsertEndChild(xmlSubNode);
 				}
diff --git a/src/plugins/FreeMindTranslator/FreeMindTranslator.cpp b/src/plugins/FreeMindTranslator/FreeMindTranslator.cpp
index c60a068..ce0472e 100644
--- a/src/plugins/FreeMindTranslator/FreeMindTranslator.cpp
+++ b/src/plugins/FreeMindTranslator/FreeMindTranslator.cpp
@@ -146,7 +146,7 @@ status_t Converter::ConvertPDoc2FreeMind()
 		while(allNodes->FindMessage("node",i,tmpMessage)==B_OK)
 		{
 			tmpMessage->FindPointer("this",&id);
-			nodes[(int32)id]=tmpMessage;
+			nodes[static_cast<int32>(reinterpret_cast<intptr_t>(id))]=tmpMessage;
 			tmpMessage = new BMessage();
 -			i++;
 		}
@@ -154,7 +154,7 @@ status_t Converter::ConvertPDoc2FreeMind()
 		while(allConnections->FindMessage("node",i,tmpMessage)==B_OK)
 		{
 			tmpMessage->FindPointer("this",&id);
-			connections[(int32)id]=tmpMessage;
+			connections[static_cast<int32>(reinterpret_cast<intptr_t>(id))]=tmpMessage;
 			tmpMessage = new BMessage();
 			i++;
 		}
@@ -233,12 +233,12 @@ TiXmlElement Converter::ProcessNode(BMessage *node)
 	TiXmlElement	xmlNode("node");
 	node->FindPointer("this", &tmpNode);
 	//add this node to the processed List
-	processedIDs.insert((int32)tmpNode);
+	processedIDs.insert(static_cast<int32>(reinterpret_cast<intptr_t>(tmpNode)));
 	//find the data field where name and attributes are stored
 	node->FindMessage(P_C_NODE_DATA,data);
 	data->FindString(P_C_NODE_NAME,(const char **)&name);
 
-	xmlNode.SetAttribute("ID",(int32)tmpNode);
+	xmlNode.SetAttribute("ID",static_cast<int32>(reinterpret_cast<intptr_t>(tmpNode)));
 	xmlNode.SetAttribute("TEXT",(const char *)name);
 	//add all Attributes
 	type_code	type	= 0;
@@ -275,18 +275,18 @@ TiXmlElement Converter::ProcessNode(BMessage *node)
 		if ((fromNode == tmpNode) && (processedIDs.find((*iter).first) == processedIDs.end()))
 		{
 			//check if the node was already insert if so we "connect via a arrowlink
-			if (processedIDs.find((int32)toNode) != processedIDs.end())
+			if (processedIDs.find(static_cast<int32>(reinterpret_cast<intptr_t>(toNode))) != processedIDs.end())
 			{
 				TiXmlElement	xmlLink("arrowlink");
 				xmlLink.SetAttribute("ID",(*iter).first);
-				xmlLink.SetAttribute("DESTINATION",(int32)toNode);
+				xmlLink.SetAttribute("DESTINATION",static_cast<int32>(reinterpret_cast<intptr_t>(toNode)));
 				xmlNode.InsertEndChild(xmlLink);
 				processedIDs.insert((*iter).first);
 			}
 			else
 			{
 				map<int32,BMessage*>::iterator	found;
-				found = nodes.find((int32)toNode);
+				found = nodes.find(static_cast<int32>(reinterpret_cast<intptr_t>(toNode)));
 				if (found!=nodes.end())
 				{
 					processedIDs.insert((*iter).first);
@@ -297,11 +297,11 @@ TiXmlElement Converter::ProcessNode(BMessage *node)
 		else if ((toNode == tmpNode) && (processedIDs.find((*iter).first)==processedIDs.end()))
 		{
 			//check if the node was already insert if so we "connect via a arrowlink
-			if (processedIDs.find((int32)fromNode)!=processedIDs.end())
+			if (processedIDs.find(static_cast<int32>(reinterpret_cast<intptr_t>(fromNode)))!=processedIDs.end())
 			{
 				TiXmlElement	xmlLink("arrowlink");
 				xmlLink.SetAttribute("ID",(*iter).first);
-				xmlLink.SetAttribute("DESTINATION",(int32)fromNode);
+				xmlLink.SetAttribute("DESTINATION",static_cast<int32>(reinterpret_cast<intptr_t>(fromNode)));
 				xmlNode.InsertEndChild(xmlLink);
 			}
 		}
@@ -325,10 +325,10 @@ BMessage* Converter::GuessStartNode(void)
 	if (connection->FindPointer(P_C_NODE_CONNECTION_FROM, &fromNode) == B_OK)
 	{
 		nodeID = fromNode;
-		visited.insert((int32)fromNode);
+		visited.insert(static_cast<int32>(reinterpret_cast<intptr_t>(fromNode)));
 		found = true;
 	}
-	while (found && (visited.find((int32)fromNode) == visited.end()))
+	while (found && (visited.find(static_cast<int32>(reinterpret_cast<intptr_t>(fromNode))) == visited.end()))
 	{
 		found=false;
 		iter = connections.begin();
@@ -338,7 +338,7 @@ BMessage* Converter::GuessStartNode(void)
 			connection->FindPointer(P_C_NODE_CONNECTION_TO,&toNode);
 			if (toNode == fromNode)
 			{
-				visited.insert((int32)fromNode);
+				visited.insert(static_cast<int32>(reinterpret_cast<intptr_t>(fromNode)));
 				nodeID=fromNode;
 				fromNode=toNode;
 				found=true;
@@ -346,7 +346,7 @@ BMessage* Converter::GuessStartNode(void)
 			iter++;
 		}
 	}
-	iter = nodes.find((int32)nodeID);
+	iter = nodes.find(static_cast<int32>(reinterpret_cast<intptr_t>(nodeID)));
 	return (*iter).second;
 
 }
-- 
2.19.0

